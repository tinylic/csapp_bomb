string InfixToPostfix(const string &infix) {
	string postfix = "";
	for (auto ch : infix) {
		if (IsOperator(ch)) {
			while (!Stack_Operator.empty() && 
				IsOperator(Stack_Operator.top()) && 
				priority(Stack_Operator.top()) >= priority(ch)) {
				PushString(postfix, Stack_Operator.top());
        		        Stack_Operator.pop();
			}
			Stack_Operator.push(ch);
		}
		else {
		switch(ch) {
			case '(' :
				Stack_Operator.push(ch);
				break;
			case ')' :
				while (!Stack_Operator.empty() && 
					Stack_Operator.top() != '(') {
					PushString(postfix,Stack_Operator.top());
					Stack_Operator.pop();
				}
				Stack_Operator.pop();
				break;
			default :
				PushString(postfix, ch);
		}
		}
	}
    while (!Stack_Operator.empty()) {
		PushString(postfix, Stack_Operator.top());
		Stack_Operator.pop();
    }

    postfix.pop_back();
    return postfix;
}
